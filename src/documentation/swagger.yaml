openapi: 3.0.3
info:
  title: Careplace - Backend REST API
  description: |-
    Careplace REST API Documentation - OpenAPI Specification 3.0.3.
    This REST API is used to manage all Careplace applications.
  termsOfService: "https://www.careplace.pt/termos-e-condicoes"
  contact:
    email: admin@careplace.pt
  version: 1.0.0
servers:
  - url: "http://localhost:8080/api/v1"
    description: Development Environment
    default: true
  - url: "http://www.staging.api.careplace.pt"
    description: Staging Environment
tags:
  - name: Authentication
    description: Authentication operations
  - name: Users
    description: Users operations
  - name: Companies
    description: Companies operations
  - name: Orders
    description: Orders operations
  - name: Checkout
    description: Checkout operations
  - name: Payment Methods
    description: Payment Methods operations
  - name: Calendar
    description: Calendar operations
  - name: Services
    description: Services operations
  - name: Files
    description: Files operations
  - name: Admin
    description: Admin operations
paths:
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      description: Logs out current logged in user session
      operationId: logout
      security:
        - jwt_context:
            - "write:pets"
            - "read:pets"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User logged out successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Missing or invalid token

    get:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "405":
          description: Invalid input
      security:
        - jwt_context:
            - "write:pets"
            - "read:pets"
  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change password
      description: Changes the password of the current logged in user
      operationId: changePassword
      requestBody:
        description: Change password
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: "123456"
                newPassword:
                  type: string
                  example: "123456"

        required: true
      security:
        - jwt_context:
            - "write:pets"
            - "read:pets"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Missing or invalid token
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid old password
  /auth/crm/login:
    post:
      tags:
        - Authentication
      summary: CRM Login
      description: Logs in a user to the CRM
      operationId: crmLogin
      requestBody:
        description: Login user to the CRM
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.whick@careplace.pt"
                password:
                  type: string
                  example: "123456"

        required: true
        security:
          - jwt_context:
              - "write:pets"
              - "read:pets"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CRM_User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Missing or invalid token
  /auth/marketplace/login:
    post:
      tags:
        - Authentication
      summary: Marketplace Login
      description: Logs in a user to the Marketplace
      operationId: marketplaceLogin
      requestBody:
        description: Login user to the Marketplace
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.whick@gmail.com"
                password:
                  type: string
                  example: "123456"

        required: true
        security:
          - jwt_context:
              - "write:pets"
              - "read:pets"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Marketplace_User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Missing or invalid token
  

  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid status value
      security:
        - jwt_context:
            - "write:pets"
            - "read:pets"
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid tag value
      security:
        - jwt_context:
            - "write:pets"
            - "read:pets"
  "/pet/{petId}":
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - jwt_context:
            - "write:pets"
            - "read:pets"
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        "405":
          description: Invalid input
      security:
        - jwt_context:
            - "write:pets"
            - "read:pets"
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
        - jwt_context:
            - "write:pets"
            - "read:pets"
  "/pet/{petId}/uploadImage":
    post:
      tags:
        - pet
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - jwt_context:
            - "write:pets"
            - "read:pets"
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/xml:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "405":
          description: Invalid input
  "/store/order/{orderId}":
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    CRM_User:
      type: object
      properties:
        _id:
          type: string
          example: 63cad0df068be823de4ad559
        cognito_id:
          type: string
          example: 39425f3b-a637-4e6a-9db4-97fd2132a416
        profile_picture:
          type: string
          example: "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"
        company:
          $ref: "#/components/schemas/CRM_User"
        name:
          type: string
          example: John Wick
        email:
          type: string
          example: john.wick@careplace.pt
        phone:
          type: string
          example: 912345678
        birth_date:
          type: date
          exampe: 1347-03-27T00:00:00.000Z
        age:
          type: integer
          example: 675
        gender:
          type: string
          example: male
          enum:
            - male
            - female
            - other
        address:
          type: object
          properties:
            street:
              type: string
              example: Rua Adriano Correia de Oliveira 4A
            postal_code:
              type: string
              example: 1234-567
            city:
              type: string
              example: Lisboa
            state:
              type: string
              example: CA
            country:
              type: string
              example: PT
              enum:
                - PT
                - ES
                - FR
                - DE
                - IT
                - UK
                - US
            coordinates:
              type: array
              items:
                type: string
                example:
                  - 38.71667
                  - -9.13333
        settings:
          type: object
          properties:
            theme:
              type: string
              example: dark
              enum:
                - dark
                - light
            notifications:
              type: object
              properties:
                email:
                  type: boolean
                  example: true
                sms:
                  type: boolean
                  example: true
                push:
                  type: boolean
                  example: true
          createdAt:
            type: timestamp
            example: 2019-03-27T12:00:00.000Z
          updatedAt:
            type: timestamp
            example: 2019-03-27T12:00:00.000Z
      xml:
        name: CRM_User
    Marketplace_User:
      type: object
      properties:
        _id:
          type: string
          example: 63cad0df068be823de4ad559
        cognito_id:
          type: string
          example: 39425f3b-a637-4e6a-9db4-97fd2132a416
        profile_picture:
          type: string
          example: "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"
        company:
          type: string
          example: 63cad0df068be823de4ad559
        name:
          type: string
          example: John Wick
        email:
          type: string
          example: john.wick@careplace.pt
        phone:
          type: string
          example: 912345678
        birth_date:
          type: date
          exampe: 1347-03-27T00:00:00.000Z
        age:
          type: integer
          example: 675
        gender:
          type: string
          example: male
          enum:
            - male
            - female
            - other
        relatives:
          type: array
          items:
            $ref: "#/components/schemas/Relative"
        address:
          type: object
          properties:
            street:
              type: string
              example: Rua Adriano Correia de Oliveira 4A
            postal_code:
              type: string
              example: 1234-567
            city:
              type: string
              example: Lisboa
            state:
              type: string
              example: CA
            country:
              type: string
              example: PT
              enum:
                - PT
                - ES
                - FR
                - DE
                - IT
                - UK
                - US
            coordinates:
              type: array
              items:
                type: string
                example:
                  - 38.71667
        stripe_information: 
          type: object
          properties:
            customer_id:
              type: string
              example: cus_63cad0df068be823de4ad559
        settings:
          type: object
          properties:
            theme:
              type: string
              example: dark
              enum:
                - dark
                - light
            notifications:
              type: object
              properties:
                email:
                  type: boolean
                  example: true
                sms:
                  type: boolean
                  example: true
                push:
                  type: boolean
                  example: true
          createdAt:
            type: timestamp
            example: 2019-03-27T12:00:00.000Z
          updatedAt:
            type: timestamp
            example: 2019-03-27T12:00:00.000Z
      xml:
        name: Marketplace_User
    Caregiver:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/CRM_User"
        services:
          type: array
          items:
            $ref: "#/components/schemas/Service"
        schedule:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/Review"
    Relative:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/Marketplace_User"
        kinship_degree: null
        type: object
        properties:
          from:
            type: string
            example: son
            enum:
              - father
              - mother
              - brother
              - sister
              - son
              - daughter
              - uncle
              - aunt
              - nephew
              - niece
              - grandparent
              - grandchild
              - other
          to:
            type: string
            example: father
            enum:
              - father
              - mother
              - brother
              - sister
              - son
              - daughter
              - uncle
              - aunt
              - nephew
              - niece
              - grandparent
              - grandchild
              - other
        profile_picture:
          type: string
          example: "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg"
        name:
          type: string
          example: John Wick
        birthdate:
          type: date
          example: 1347-03-27T00:00:00.000Z
        age:
          type: integer
          example: 42
        gender:
          type: string
          example: male
          enum:
            - male
            - female
            - other
        medical_conditions:
          type: string
          example: todo
        address:
          type: object
          properties:
            street:
              type: string
              example: Rua Adriano Correia de Oliveira 4A
            postal_code:
              type: string
              example: 1234-567
            city:
              type: string
              example: Lisboa
            state:
              type: string
              example: CA
            country:
              type: string
              example: PT
              enum:
                - PT
                - ES
                - FR
                - DE
                - IT
                - UK
                - US
            coordinates:
              type: array
              items:
                type: string
                example:
                  - 38.71667
                  - -9.13333
          createdAt:
            type: timestamp
            example: 2019-03-27T12:00:00.000Z
          updatedAt:
            type: timestamp
            example: 2019-03-27T12:00:00.000Z
    Company:
      type: object
      properties:
        _id:
          type: string
          example: 63cad0df068be823de4ad559
        business_profile:
          type: object
          properties:
            name:
              type: string
              example: Careplace
            email:
              type: string
              example: geral@company.pt
            phone:
              type: string
              example: 912345678
            website:
              type: string
              example: www.company.pt
            logo:
              type: string
              example: >-
                https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg
              banner:
                type: string
                example: >-
                  https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg
        services:
          type: array
          items:
            $ref: "#/components/schemas/Service"
        service_area:
          type: array
          items:
            type: object
            properties:
              latitude:
                type: string
                example: 38.71667
              longitude:
                type: string
                example: -9.13333
        team:
          type: array
          items:
            $ref: "#/components/schemas/CRM_User"
        address:
          type: object
          properties:
            street:
              type: string
              example: Rua Adriano Correia de Oliveira 4A
            postal_code:
              type: string
              example: 1234-567
            city:
              type: string
              example: Lisboa
            state:
              type: string
              example: CA
            country:
              type: string
              example: PT
              enum:
                - PT
                - ES
                - FR
                - DE
                - IT
                - UK
                - US
            coordinates:
              type: array
              items:
                type: string
                example:
                  - 38.71667
                  - -9.13333
        email:
          type: string
          example: null
        createdAt:
          type: timestamp
          example: 2019-03-27T12:00:00.000Z
        updatedAt:
          type: timestamp
          example: 2019-03-27T12:00:00.000Z
    Event:
      type: object
      properties:
        _id:
          type: string
          example: 63cad0df068be823de4ad559
        user:
          $ref: "#/components/schemas/CRM_User"
        series:
          $ref: "#/components/schemas/Event_Series"
        title:
          type: string
          example: John's Wick Birthday
        description:
          type: string
          example: John's Wick Birthday Party at the Zoo
        start:
          type: timestamp
          example: 2019-03-27T12:00:00.000Z
        end:
          type: timestamp
          example: 2019-03-27T12:00:00.000Z
        allDay:
          type: boolean
          example: false
        location:
          type: string
          example: Zoo
        textColor:
          type: string
          example: "#000000"
          createdAt:
            type: timestamp
            example: 2019-03-27T12:00:00.000Z
          updatedAt:
            type: timestamp
            example: 2019-03-27T12:00:00.000Z
    Event_Series:
      type: object
      properties:
        _id:
          type: string
          example: 63cad0df068be823de4ad559
        user:
          $ref: "#/components/schemas/CRM_User"
        recurrency_type:
          type: integer
          example: 1
          enum:
            - 1
            - 2
            - 4
        schedule:
          type: array
          items:
            type: object
            properties:
              start:
                type: timestamp
                example: 2019-03-27T12:00:00.000Z
              end:
                type: timestamp
                example: 2019-03-27T12:00:00.000Z
        end_series:
          type: object
          properties:
            ending_type:
              type: integer
              example: 1
              enum:
                - 0
                - 1
                - 2
            end_date:
              type: timestamp
              example: 2019-03-27T12:00:00.000Z
            end_occurrences:
              type: integer
              example: 10
        title:
          type: string
          example: John's Wick Birthday
        description:
          type: string
          example: John's Wick Birthday Party at the Zoo
        start:
          type: timestamp
          example: 2019-03-27T12:00:00.000Z
        end:
          type: timestamp
          example: 2019-03-27T12:00:00.000Z
        allDay:
          type: boolean
          example: false
        location:
          type: string
          example: Zoo
        textColor:
          type: string
          example: "#000000"
        createdAt:
          type: timestamp
          example: 2019-03-27T12:00:00.000Z
        updatedAt:
          type: timestamp
          example: 2019-03-27T12:00:00.000Z
    Order:
      type: object
      properties:
        _id:
          type: string
          example: 63cad0df068be823de4ad559
        company:
          $ref: "#/components/schemas/Company"
        caregiver:
          $ref: "#/components/schemas/CRM_User"
        user:
          $ref: "#/components/schemas/Marketplace_User"
        relative:
          $ref: "#/components/schemas/Relative"
        status:
          type: string
          example: pending
          enum:
            - pending
            - accepted
            - rejected
            - cancelled
            - completed
        order_total:
          type: number
          example: 100
        services:
          type: array
          items:
            $ref: "#/components/schemas/Service"
          schedule_information:
            type: object
            properties:
              start_date:
                type: timestamp
                example: 2019-03-27T12:00:00.000Z
              end_date:
                type: timestamp
                example: 2019-03-27T12:00:00.000Z
              recurrency_type:
                type: integer
                example: 1
                enum:
                  - 1
                  - 2
                  - 4
              schedule:
                type: array
                items:
                  type: object
                  properties:
                    week_day:
                      type: integer
                      example: 1
                      enum:
                        - 1
                        - 2
                        - 3
                        - 4
                        - 5
                        - 6
                        - 7
                    start:
                      type: timestamp
                      example: 2019-03-27T12:00:00.000Z
                    end:
                      type: timestamp
                      example: 2019-03-27T12:00:00.000Z
              address:
                type: object
                properties:
                  street:
                    type: string
                    example: 123 Main St
                  city:
                    type: string
                    example: New York
                  state:
                    type: string
                    example: NY
                  zip:
                    type: string
                    example: "10001"
                  country:
                    type: string
                    example: USA
                  coordinates:
                    type: object
                    properties:
                      lat:
                        type: number
                        example: 40.7128
                      lng:
                        type: number
                        example: 74.006
              screening_visit:
                $ref: "#/components/schemas/Event"
              observations:
                type: string
                example: John is a very nice guy
              stripe_subscription_id:
                type: string
                example: sub_1234567890
              created_at:
                type: timestamp
                example: 2019-03-27T12:00:00.000Z
              updated_at:
                type: timestamp
                example: 2019-03-27T12:00:00.000Z
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    jwt_context:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token
